■ 데이터베이스 및 컬렉션, 문서 생성 및 수정
   ο 데이터베이스 생성 및 삭제 
     데이터베이스의 이름으로 하고자 하는 이름을 정하여 'use' 명령어를 사용한다.

     >use mytestdb
 
     현재 사용하고 있는 데이터베이스 이름을 알고 싶다면 'db' 명령어를 사용한다.

     >db

     데이터 베이스 생성 완료는 한 개 이상의 문서를 삽입함으로써 데이터베이스의 생성이 완료된다.
 
     >db.post.insert({"statement" : "This is the first Collection and Document!" })
 
     위와 같이 입력하면 바로 'post'라는 이름의 컬렉션 또한 문서와 함께 만들어 진다.
 
     모든 데이터 베이스의 목록 표시는 다음과 같다.

     >show dbs
   
     생성한 데이터베이스를 삭제하는 방법은 삭제할 db 를 선택한 후 'dropDatabase' 명령어를 사용한다.

     >db.dropDatabase()
    (※ 'use'명령어로 db 를 선택하지 않은 상태에서 위의 명령어를 사용할 경우 초기에 있는 "test" 데이터베이스가 삭제된다.)


    - db.runCommand ()
      현재 데이터베이스의 컨텍스트에서 명령을 실행한다.


   ο 컬렉션의 생성 및 삭제 
     컬렉션을  생성하는  경우 'createCollection()' 명령어를 사용한다.

     >db.createCollection("mycoll") 
 
     'show collections' 명령어를 사용하면 현재 선택된 데이터베이스 내의 컬렉션들을 확인할 수 있다. 

     >show collections
 
     컬렉션만 만들 목적이 아닌 경우 insert 명령어를 사용하여 문서와 함께 만드는 방법이 효율적이다.
 
     컬렉션을 삭제할 때에는 'drop()' 명령어를 사용한다.

     (컬렉션이 있는 db 가 선택된 상태에서)
     >db.mycoll.drop()


   ο 문서의 생성 및 삭제
     문서의 생성은 'insert()' 또는 'save()' 명령어를 사용한다.
     
     - 삽입시 insert()와 save()
       insert : _id가 동일한 값을 저장면 오류 발생
       save : _id가 동일해도 저장한다.(수정한다) 즉, 기존에 저장된 데이터위에 덮어쓴다.

     (mytestdb 로 선택된 상태에서) 
      >db.mycoll.insert( { "myfirstDocument" : "Hello, Everyone" } )
      >db.mycoll.find()
      
      ObjectId는 몽고디비에 의해 관리되는 유일한 식별키이다.
 
     만약 문서에 해당하는 내용이 위의 예처럼 간단하면 큰 문제가 없지만, 보다 긴 문서를 입력해야 하는 경우 지역 변수를 만들어 'insert()'명령어를 사용하면 효율적 이다. 
 
     >temp = { "Name": "This is local variable", 
        "content" : "If document gets longer than what you thougt, use this way!",
        "content2" : "Learning Assembly is difficult!", 
        "Bywho" : "홍길동", 
        "myword" : "Nice to meet you!" } 
     >db.mycoll.insert( temp ) 
 
     'find()'명령어는 현재 컬렉션에 포함되어 있는 문서들을 모두 반환하는 명령어이다.
     비슷한  명령어로 'findOne()'명령어가 있고, 파라미터를 어떻게 설정하느냐에 따라 다양한 방식으로 문서를 찾아낼 수 있다.
 
     문서의 삭제는 'remove()' 함수를 사용한다. 이 함수는 선택적으로 쿼리 문서를 파라미터로 사용하여 쿼리의 조건에 일치하는 문서들만 삭제된다.
 
     (db 가 선택된 상태에서)
     >db.mycoll.insert( { "Name" : "it will be deleted" } ) 

     >db.mycoll.remove( { "Name" : "it will be deleted" } ) 
     (※ 만약 파라미터를 채우지 않고 'remove()' 형태로 함수를 호출할 시 컬렉션 내의 모든 문서가 삭제된다.)
 
 
    ο 문서 갱신하기 
      문서를 생성하는 과정에서 오타가 생겼거나, 문서안의 저장된 값을 바꾸기 위해서는 'update()' 함수를 사용한다. update() 함수는 갱신할 대상인 '쿼리  문서'와 문서를 어떻게 변경할지를 포함하는 '수정  문서'를 파라미터로 받는다.

      - 수정시 update()와 save()
        update : 특정 필드만 수정할 수 있다.
        save : 필드단위로 수정되지 않고 데이터를 덮어 쓰므로 이전 데이터는 사라진다.

       http://docs.mongodb.org/manual/reference/operator/updat
 
     - 문서치환 
       문서치환은 문서 갱신하기 중 가장 간단한 유형이다. 이 방법은 몽고 DB 를 활용하는 단계에서 스키마를 대대적으로 변경하는데 유용하다. 
 
       예를 들어, 문서를 다음과 같이 변경하려면,
 
       <before> 
       { 
       "_id" : ObjectId("0000000000000000000000000000000") // 계속 달라지는 부분 
       "name" : "홍길동" 
       "food1" : "사과" 
       "food2" : "오렌지" 
       }
 
       <after> 
       { 
       "_id" : ObjectID("0000000000000000000000000000000") 
       "myname" : "홍길동" 
       "menu" : 
       { 
       "food1" : "사과" 
       "food2" : "오렌지" 
       } 
       } 
 
       update() 메소드를 사용하여 다음과 같이 문서를 치환한다. 
 
       >var temp = db.mycoll.findOne( {"name" : "홍길동"} ) 
       >temp.myname = temp.name;
       홍길동 
       >delete temp.name;
       true
       >temp.menu = { "food1" : temp.food1, "food2" : temp.food2 };
       { "food1" : "사과", "food2" : "오렌지" } 
       >delete temp.food1
        true 
       >delete temp.food2 
       true 
       >db.mycoll.update({"name" : "홍길동"}, temp) 
  
       혹은 지역변수를 활용하여 문서 안의 부분적인 데이터 값을 조정할 수 도 있다. 
 
       (원하는 DB 로 선택한 후) 
       >db.mycoll.insert({"name": "홍길동", "age" :22}) 
       >temp = db.mycoll.findOne({"age" : 22 }) 
        { 
            "_id" : ObjectId("0000000000000000000000000000000000"), 
            "name" : "홍길동", 
            "age" : 22 
         } 
       >temp.age++ 
        22 
       >db.mycoll.update({"age" : 22}, temp) 
 

      - 필드 제한자 사용하기 
        보통  문서를  갱신하는  경우 특정 부분만 바꾸게 되는 상황이 많은데, 이런 부분 갱신은 "갱신 제한자(update operator)"를 사용하여 쉽게 처리할 수 있다. 갱신 제한자는 키를 변경, 추가 또는 제거하고 배열과 내장 문서를 조작하는 복잡한 갱신 연산을 수행하는데 사용되는 특수키이다.
 
       ① '$inc' 제한자
        위에서 "age" 값을 하나씩 증가시키는 과정에서 "age" 이외는 다른 필드의 숫자를 원하는 만큼 증가시켜야 하는 경우 하나하나씩 증감시키는 방식은 비효율적이다.
  
        >db.mycoll.insert({ "bookname" : "Assembly_language_x86", "page" : 50 })
        >db.mycoll.update({ "bookname" :  "Assembly_language_x86"}, 
            {"$inc" : {"page" : 24}})  // page 값을  24만큼 증가 시키고 싶을 때
 
        cf) "_id" 값은 변경할 수 없다.
 
       ② '$set' 제한자
         '$set' 제한자는 키의 값을 설정한다. 이 제한자는 특히 나중에 스키마를 갱신하거나 사용자 정의 키를 추가할 때 편리하게 쓸 수 있다.

         >db.mycoll.insert({"category" : "fruit", "name" : "파인애플"})
         >db.mycoll.update( {"name" : "파인애플"}, { "$set" : {"location" :  "열대지방"}} )
 
         만약 이미 존재하는 필드의 값을 바꾸고 싶다면,
 
         >db.mycoll.update( {"category" : "fruit"}, { "$set" : {"name" : "스프링"}} )
 
         즉, '$set' 제한자로 추가하는 문서의 필드가 기존 문서에 없는 필드이면 필드를 추가한 후 값을 대입하며, 있는 필드이면 값만 갱신한다.
 
         또 '$set'은 필드(=키)의 데이터 타입도 변경할 수 있다.
 
       ③ '$unset' 제한자
         필드-값 단위로 마음에 들지 않는 부분을 제거한다.
 
         >db.mycoll.update( {"name" :  "스프링"},  {"$unset" : {"category" : 1}} )
           : 문서내의  'category' 필드가 삭제
 
 
      - 배열 제한자 사용하기
       ① '$push' 제한자
         지정된 키가 이미 존재하면 배열의 끝에 아이템(문서 or 값)을 추가하고, 그렇지 않으면 새로운 배열을 생성해 추가한다.
         예를 들어, 문서 안에 "category"와 "location" 필드가 있는 상태에서 "stuff" 안에 배열로 열대 과일 이름들을 나열하려면,
 
        >db.mycoll.update( {"category" :  "fruit"},
           { $push: {"stuff" : 
           {"1" : "바나나", "2" : "오렌지"}}} ) // 현재 문서를 삽입하게 됨
 
          findOne() 메소드를 통해 현재 컬렉션 내의 문서를 살펴보면,

        >db.mycoll.findOne( {"category" :  "fruit"})

        만약 배열에 단순한 배열값을 추가하고 싶다면 같은 방법을 다음과 같이 활용하여 입력한다.

        >db.mycoll.update( {"category" :  "fruit"}, 
           { $push : {"stuff" : "파피아" }} )

        cf) db.mycoll.insert( {"fruit" : ["파피아", "수박", "파인애플", "오렌지"]} ) 
        => 가장 기본적인 배열 생성방법
 
       ② '$pull' 제한자 
         배열 안의 값을 삭제할 때 사용된다. 'pull()' 제한자는 파라미터로 받은 쿼리문의 조건을 만족하는 값을 찾아 배열에서 삭제한다. 
 
         "stuff" 배열의 내부의 "파피아"를 삭제하고 싶다면 
        >db.mycoll.update( {"category" : "fruit"},   
           {"$pull" : { "stuff" :  "파피아" } } ) 
