■ Socket.io 외부모듈
 ο 개요
    1) WebSocket
       - WebSocket은 사용자의 브라우저와 서버 사이의 동적인 양방향 연결 채널을 구성하는 HTML5 프로토콜이다. WebSocket API를 통해 서버로 메시지를 보내고 요청 없이 응답을 받아오는 것이 가능하다.
       - HTTP는 클라이언트에 의해 초기화되기 때문에 서버가 변경사항을 클라이언트에게 알릴 수 있는 방법이 없지만 WebSocket의 연결은 HTTP 통신과는 다르게 클라언트가 특정 주기를 가지고 Polling하지 않아도 변경된 사항을 시기 적절하게 전달할 수 있는 지속적이고 완전한 양방향 연결 스트림을 만들어 주는 기술이다.
       - 이러한 특성으로 인해 WebSocket은 서버의 데이터를 클라이언트에 즉시 전달할 수 있는 실시간 애플리케이션 작성에 매우 효과적인 프로토콜이다.
       - HTML5 WebSocket은 매우 유용한 기술이지만 오래된 브라우저의 경우 지원하지 않는 경우가 있다.

    2) Socket.io
      - 브라우저 간 호환이나 이전 버전 호환을 고려하여 Node.js를 위한 강력한 Cross-platform WebSocket API인 Socket.io를 사용하는 것이 바람직하다.

    3) API
       https://socket.io/docs/


 ο Socket.io 외부모듈 설치 - Nodeclips
   이클립스에서는 작업 경로 아래 노드 프로젝트명으로 이동하여 다음과 같이 Socket.io을 설치한다.

   - socket.io 설치[버전 : 2.2.0]
      c:\work\myapp>npm install socket.io --save
   - socket.io 클라이언트 설치
      c:\work\myapp>npm install socket.io-client --save 

   [참고]
   - npm 초기화
      c:\work\myapp>npm init

   - socket.io를 설치할때 버젼을 명시하여 설치
     c:\work\myapp>npm install socket.io@2.2.0 --save

   - express와 socket.io를 설치할 경우
     c:\work\myapp>npm install express socket.io --save

   - socket.io 클라이언트 설치하지 않는 경우 socket.io 클라이언트 CDN
     https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.slim.js

	 
 ο Socket.io - 클라이언트 작성
   - 클라이어트는 script tag의 src 어트리뷰트값으로 "/socket.io/socket.io.js"을 지정한다. socket.io가 서버 기동 시에 socket.io.js 라이브러리를 자동 생성해 주기 때문에 실제 path에 socket.io.js 파일을 배치할 필요는 없다.

  - socket.io 서버에 접속하기 위해 io() 메소드를 호출한다.
    이때 생성된 socket으로 서버로의 메시지 송신 또는 서버로부터의 메시지 수신을 할 수 있다.

     var socket = io();

  - 서버로의 메시지 송신
    현재 접속되어 있는 서버로 메시지를 송신하기 위해서는 이밋(emit) 메소드를 사용한다.

    [Parameter]
       event name : 이벤트 명(string)
       msg : 송신 메시지(string or object)

  - 서버로부터의 메시지 수신
    현재 접속되어 있는 서버로부터의 메시지를 수신하기 위해서는 on 메소드를 사용한다.

    [Parameter]
        event name : 서버가 메시지 송신 시 지정한 이벤트 명(string)
        function : 이벤트 핸들러. 핸들러 함수의 인자에 서버가 송신한 메시지가 전달된다.


 ο Socket.io - express 에서 서버 작성
   - socket.io를 사용하는 경우 app를 http에 연결시키고, 이 http를 다시 socket.io에 연결시키는 과정이 필요하다. 이는 socket.io가 express를 직접 받아들이지 못하기 때문이다. socket.io는 io라는 변수명으로 서버에서 사용된다.

  - http server를 socket.io server로 upgrade한다.
    var io = require('socket.io')(server);

  - app.listen이 아닌 http.listen임에 유의

  - connection event handler function의 인자로 socket 객체가 전달된다. socket 객체는 개별 클라이언트와의 interacting을 위한 기본적인 객체이다. io 객체는 연결된 전체 클라이언트와의 interacting을 위한 객체이다.
    connection event가 발생하면(즉 클라이언트가 접속하면) 클라이언트가 전송한 메시지를 수신하거나 클라이언트에게 메시지를 송신한다.

  - 클라이언트가 전송한 메시지 수신
    현재 접속되어 있는 클라이언트로부터의 메시지를 수신하기 위해서는 on 메소드를 사용한다.
    [Parameter]
       event name : 클라이언트가 메시지 송신 시 지정한 이벤트 명(string)
       function : 이벤트 핸들러. 핸들러 함수의 인자로 클라이언트가 송신한 메시지가 전달된다.

  - 클라이언트에게 메시지 송신
    [Method]
       io.emit : 이밋 메소드는 접속된 모든 클라이언트에게 메시지를 전송한다.
       socket.emit : 메시지를 전송한 클라이언트에게만 메시지를 전송한다.
       socket.broadcast.emit : 메시지를 전송한 클라이언트를 제외한 모든 클라이언트에게 메시지를 전송한다.
       io.to(id).emit : 특정 클라이언트에게만 메시지를 전송한다. id는 socket 객체의 id 속성값이다.

    [Parameter]
       event name : 이벤트 명(string)
       msg : 송신 메시지(string or object)

    // 접속된 모든 클라이언트에게 메시지를 전송한다
    io.emit('event_name', msg);

    // 메시지를 전송한 클라이언트에게만 메시지를 전송한다
    socket.emit('event_name', msg);

    // 메시지를 전송한 클라이언트를 제외한 모든 클라이언트에게 메시지를 전송한다
    socket.broadcast.emit('event_name', msg);

    // 특정 클라이언트에게만 메시지를 전송한다
    io.to(id).emit('event_name', data);

	
 ο Namespace
    - socket.io는 서로 다른 엔드포인트(endpoint) 또는 경로(path)를 할당하는 의미로 socket에 namespace를 지정할 수 있다.
    - namespace를 특별히 지정하지 않은 경우 default namespace인 /를 사용한다.


 ο Room
    - 각 namespace 내에서 임의의 채널을 지정할 수 있다. 이를 room이라 하며 이를 통해 room에 join되어 있는 클라이언트 만의 데이터 송수신이 가능하게 된다.
    - 즉 각 클라이언트는 socket을 가지게 되며 이 socket은 namespace를 가지고 각 namespace는 room을 가질 수 있다.
    - 각 socket은 랜덤하고 유일하게 작성된 socket.id로 구별된다. socket.io는 각 socket을 socket.id를 room 식별자로 사용하여 자동으로 room을 생성하고 join시킨다.
    - 특정 클라이언트에게만 메시지를 전송할 때 io.to(id).emit를 사용하는데 이것은 사실 디폴트로 생성되어 자동 join된 개별 socket의 room에 소속되어 있는 유일한 클라이언트에 메시지를 전송한 것이다.
    - room에 join하기 위해서는 join 메소드를 사용한다.
